// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [vector]
}

model User {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    imageUrl       String?
    firstName      String?
    lastName       String?
    emailAddress   String          @unique
    credits        Int             @default(150)
    userToProjects UserToProject[]
    questionsAsked Question[]
}

model Project {
    id             String          @id @default(cuid())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    name           String
    githubUrl      String
    githubToken    String?
    deletedAt      DateTime?
    userToProjects UserToProject[]
    commits        Commit[]
    savedQuestions Question[]

    SourceCodeEmbedding SourceCodeEmbedding[]
}

model UserToProject {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId    String
    projectId String

    user    User    @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    @@unique([userId, projectId])
}

model SourceCodeEmbedding {
    id               String                      @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")? //this is particular model gemini ai provide
    sourceCode       String
    fileName         String
    summary          String
    projectId        String
    project          Project                     @relation(fields: [projectId], references: [id])
}

model Commit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId          String
    project            Project  @relation(fields: [projectId], references: [id])
    commitMessage      String
    commitHash         String
    commitAuthor       String
    commitAuthorAvatar String
    commitDate         DateTime
    //ai summary
    summary            String
}

model Question {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    question        String
    answer          String
    filesReferences Json?
    projectId       String
    project         Project  @relation(fields: [projectId], references: [id])
    userId          String
    user            User     @relation(fields: [userId], references: [id])
}
